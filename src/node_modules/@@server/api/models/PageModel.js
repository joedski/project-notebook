const { knex } = require('@@server/api/utils/knex')
const { withLimitOffset } = require('@@server/api/utils/queryModifiers')

module.exports = ({ models }) => ({
  getPages(trx, {
    limit = 0,
    offset = 0,
  } = {}) {
    return trx
    // .with('latest_page_ids', q => q
    //   .from('page')
    //   .select(['id', knex.raw('MAX("page"."created_at")')])
    //   .groupBy('id')
    // )
    .from('page')
    .select()
    .whereIn(['id', 'created_at'], function latestPageIds() {
      this
      .from('page')
      .select(['id', knex.raw('MAX("page"."created_at")')])
      .groupBy('id')
    })
    .modify(withLimitOffset, limit, offset)
    //
    // return trx
    // .from('page')
    // .select()
    // .modify(withLimitOffset, limit, offset)
  },

  async getPageById(trx, pageId) {
    const [page] = await trx
    .from('page')
    .select()
    .where({ id: pageId })
    .orderBy('created_at', 'DESC')
    .limit(1)

    return page
  },

  async createPage(trx, pageProps) {
    const pageId = await models.Entity.createEntity(trx)

    await trx
    .into('page')
    .insert({
      ...pageProps,
      id: pageId,
    })

    return this.getPageById(trx, pageId)
  },

  async updatePage(trx, pageId, pageProps) {
    await trx
    .into('page')
    .insert({
      ...pageProps,
      id: pageId,
    })

    return this.getPageById(trx, pageId)

    // await trx('page')
    // .update(pageProps)
    // .where({ id: pageId })
    //
    // return trx
    // .from('page')
    // .select()
    // .where({ id: pageId })
  },
})
