const pick = require('lodash/fp/pick')

const { knex } = require('@@server/api/utils/knex')
const { withLimitOffset } = require('@@server/api/utils/queryModifiers')

module.exports = ({ models }) => ({
  getPages(trx, {
    limit = 0,
    offset = 0,
  } = {}) {
    return trx
    .from('page')
    .select()
    .whereIn(['id', 'created_at'], function latestPageIds() {
      this
      .from('page')
      .select(['id', knex.raw('MAX("page"."created_at")')])
      .groupBy('id')
    })
    .modify(withLimitOffset, limit, offset)
  },

  /**
   * Get the latest version of a Page at the given id.
   * Returns undefined if no page exists with that id.
   * @param  {KnexTransaction}  trx    Current Transaction.
   * @param  {number}  pageId Id of the page.
   * @return {Promise<Page>}        Promise on maybe a Page.
   */
  async getPageById(trx, pageId) {
    const [page] = await trx
    .from('page')
    .select()
    .where({ id: pageId })
    .orderBy('created_at', 'DESC')
    .limit(1)

    if (!page) throw Object.assign(new Error(`Page ${pageId} not found`), {
      appError: 'entity.not_found'
    })

    return page
  },

  async createPage(trx, pageProps) {
    const pageId = await models.Entity.createEntity(trx)

    await trx
    .into('page')
    .insert({
      ...pageProps,
      id: pageId,
    })

    return this.getPageById(trx, pageId)
  },

  async updatePage(trx, pageId, pageProps) {
    await trx
    .into('page')
    .insert({
      ...pageProps,
      id: pageId,
    })
    .then(
      () => {},
      error => {
        if (error.message.includes('violates foreign key constraint')) {
          error.appError = 'entity.not_found'
        }

        throw error
      }
    )

    return this.getPageById(trx, pageId)
  },
})
