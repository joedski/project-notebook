const KoaRouter = require('koa-router')
const KoaBody = require('koa-body')

const parseBody = (options = {}) => KoaBody({ ...options })
const jsonBody = (options = {}) => parseBody({
  ...options,
  multipart: false,
  urlencoded: false,
  text: false,
})

const pageRouter = KoaRouter()

pageRouter
.get('/pages', async (ctx) => {
  ctx.body = await ctx.services.controllers.Page.getPages()
})
/**
 * Create a page.
 */
.post('/pages', jsonBody(), async (ctx) => {
  // TODO: Schema.
  // TODO: Errors.
  if (!ctx.request.body) ctx.throw(400, 'Malformed or missing body')

  const payload = {
    content: ctx.request.body.content,
    summary: ctx.request.body.summary,
  }

  // "summary" is not required.
  if (!payload.content) ctx.throw(400, 'Missing required prop "content"')

  // TODO: Actual logging.
  console.log('Create page:', payload)

  ctx.body = await ctx.services.controllers.Page.createPage(payload)
})
.get('/pages/:id', async (ctx) => {
  const pageId = parseInt(ctx.params.id, 10)

  if (!ctx.params.id || !Number.isFinite(pageId)) ctx.throw(404)

  ctx.body = await ctx.services.controllers.Page.getPageById(pageId)
})
.put('/pages/:id', jsonBody(), async (ctx) => {
  const pageId = parseInt(ctx.params.id, 10)

  if (!ctx.params.id || !Number.isFinite(pageId)) ctx.throw(404)
  if (!ctx.request.body) ctx.throw(400, 'Malformed or missing body')

  const payload = {
    content: ctx.request.body.content,
    summary: ctx.request.body.summary,
  }

  // "summary" is not required.
  if (!payload.content) ctx.throw(400, 'Missing required prop "content"')

  // TODO: Actual logging.
  console.log('Create page:', payload)

  ctx.body = await ctx.services.controllers.Page.updatePage(pageId, payload)
})

Object.assign(exports, {
  pageRouter,
})
